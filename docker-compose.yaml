version: "3.9"

name: moderation-service-v3-dev

services:
  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8888:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres:5432
      - ADMINER_PLUGINS=enum-option json-column
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - moderation-net

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 2s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    networks:
      - moderation-net

  minio:
    image: minio/minio
    command: server --address ":9000" --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - moderation-net

  nats:
    restart: always
    image: nats:latest
    container_name: nats
    command: -js -m 8222
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - moderation-net

  # auth-service:
  #   container_name: authorization-service
  #   build:
  #     context: .
  #     dockerfile: ./apps/auth/Dockerfile
  #   env_file: ".env"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - moderation-net

  # task-service:
  #   container_name: task-service
  #   build:
  #     context: .
  #     dockerfile: ./apps/task/Dockerfile
  #   env_file: ".env"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     minio:
  #       condition: service_started
  #   networks:
  #     - moderation-net

  # webhook-service:
  #   container_name: webhook-service
  #   build:
  #     context: .
  #     dockerfile: ./apps/webhook/Dockerfile
  #   env_file: ".env"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     minio:
  #       condition: service_started
  #   networks:
  #     - moderation-net

  # text-worker:
  #   container_name: text-analysis-worker
  #   build: ./apps/workers/text
  #   env_file: ".env"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     minio:
  #       condition: service_started
  #     nats:
  #       condition: service_started
  #   networks:
  #     - moderation-net

  # ...

  # moderation:
  #   container_name: moderation
  #   build:
  #     context: ./apps/moderation
  #     dockerfile: Dockerfile
  #   env_file: ".env"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     minio:
  #       condition: service_started
  #     nats:
  #       condition: service_started
  #   networks:
  #     - moderation-net

  temporal:
    image: temporalio/auto-setup
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      - DB=postgresql
      - DB_PORT=5432
      # this is db addr
      - POSTGRES_SEEDS=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=temporal
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/temporal.yaml
    volumes:
      - ./configs/temporal:/etc/temporal/config/dynamicconfig
    networks:
      - moderation-net
    ports:
      - "7233:7233"

  temporal-admin-tools:
    image: temporalio/admin-tools
    restart: unless-stopped
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    networks:
      - moderation-net
    stdin_open: true
    tty: true

  temporal-ui:
    image: temporalio/ui:2.21.0
    restart: unless-stopped
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
    networks:
      - moderation-net
    ports:
      - "7234:8080"

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - .configs/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - moderation-net

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=your_password
    networks:
      - moderation-net

volumes:
  postgres_data:
  minio_data:

networks:
  moderation-net:
    driver: bridge
    external: true
