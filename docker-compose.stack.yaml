services:
  proxy:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - task-aggregator
      - authorization
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - moderation-net

  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8888:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres:5432
      - ADMINER_PLUGINS=enum-types enum-option json-column
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - moderation-net

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 2s
      timeout: 5s
      retries: 10
    deploy:
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 30
      endpoint_mode: dnsrr
      placement:
        constraints:
          - node.role == manager
    networks:
      - moderation-net

  redis:
    image: redis:latest
    volumes:
      - redis_data:/data
    deploy:
      restart_policy:
        condition: any
        delay: 3s
        max_attempts: 30
      endpoint_mode: dnsrr
      placement:
        constraints:
          - node.role == manager
    networks:
      - moderation-net

  minio:
    image: minio/minio
    command: server --address 0.0.0.0:9000 --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
      - minio-config:/root/.minio
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - moderation-net

  nats:
    image: nats:latest
    deploy:
      mode: replicated
      replicas: 3
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 30
      placement:
        constraints:
          - node.role == manager
    command: -js -m 8222
    networks:
      - moderation-net

  authorization:
    image: authorization
    build: ./auth
    deploy:
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 30
      endpoint_mode: dnsrr
    environment:
      REDIS_HOST: "redis:6379"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - moderation-net

  task-aggregator:
    image: task-aggregator
    build: ./task-aggregator
    deploy:
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 30
      endpoint_mode: dnsrr
    environment:
      MINIO_URL: ${MINIO_URL}
      POSTGRES_URL: ${POSTGRES_URL}
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    networks:
      - moderation-net

  result-aggregator:
    image: result-aggregator
    build: ./result-aggregator
    deploy:
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 30
      endpoint_mode: dnsrr
    environment:
      MINIO_URL: ${MINIO_URL}
      POSTGRES_URL: ${POSTGRES_URL}
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    networks:
      - moderation-net

  moderation:
    image: moderation
    build: ./moderation-service
    deploy:
      update_config:
        parallelism: 2
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 30
      endpoint_mode: dnsrr
      mode: replicated
      replicas: 3
    environment:
      REDIS_URL: ${REDIS_URL}
    depends_on:
      - redis
    networks:
      - moderation-net

volumes:
  redis_data:
  postgres_data:
  minio_data:
  minio-config:

networks:
  moderation-net:
    driver: bridge
