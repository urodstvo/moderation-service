-- +goose Up
-- +goose StatementBegin
SELECT 'up SQL query';

CREATE TYPE "node_status" AS ENUM (
  'aborted',
  'created',
  'processing',
  'completed',
  'failed'
);

CREATE TYPE "content_type" AS ENUM (
  'text',
  'image',
  'audio',
  'video'
);

CREATE TABLE "users" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "email" varchar(255) UNIQUE NOT NULL,
  "password" varchar(255) NOT NULL,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp,
  "is_verified" boolean DEFAULT false
);

CREATE TABLE "roles" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(63) UNIQUE NOT NULL,
  "description" text
);

INSERT INTO "roles" ("name", "description") VALUES
  ('USER', 'User'),
  ('ADMIN', 'Admin');

CREATE TABLE "permissions" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(127) UNIQUE NOT NULL,
  "description" text
);

INSERT INTO "permissions" ("name", "description") VALUES
  ('GROUP_TASK:CREATE', 'Create group tasks'),
  ('GROUP_TASK:READ', 'Read group tasks'),
  ('GROUP_TASK:UPDATE', 'Update group tasks'),
  ('GROUP_TASK:DELETE', 'Delete group tasks'),
  ('ALL', 'All permissions');

CREATE TABLE "role_permissions" (
  "role_id" integer,
  "permission_id" integer,
  PRIMARY KEY ("role_id", "permission_id")
);

-- Назначаем USER
INSERT INTO role_permissions (role_id, permission_id)
SELECT
  (SELECT id FROM roles WHERE name = 'USER') AS role_id,
  id AS permission_id FROM permissions WHERE name LIKE 'GROUP_TASK:%';

-- Назначаем ADMIN
INSERT INTO role_permissions (role_id, permission_id)
SELECT
  (SELECT id FROM roles WHERE name = 'ADMIN') AS role_id,
  id AS permission_id FROM permissions WHERE name = 'ALL';

CREATE TABLE "user_roles" (
  "user_id" integer,
  "role_id" integer,
  PRIMARY KEY ("user_id", "role_id")
);

CREATE TABLE "tokens" (
  "user_id" integer PRIMARY KEY,
  "token" varchar(255) UNIQUE NOT NULL
);

CREATE TABLE "webhooks" (
  "user_id" integer PRIMARY KEY,
  "webhook_url" text NOT NULL
);

CREATE TABLE "task_status_nodes" (
  "task_id" INTEGER NOT NULL,
  "node_key" VARCHAR(255) NOT NULL,
  "status" node_status NOT NULL DEFAULT (node_status.created),
  "details" jsonb,
  "created_at" timestamp NOT NULL DEFAULT (now()),
  "updated_at" timestamp NOT NULL DEFAULT (now()),
  PRIMARY KEY ("task_id", "node_key")
);

CREATE TABLE "task_status_node_relations" (
  "task_id" INTEGER NOT NULL,
  "parent_key" VARCHAR(255) NOT NULL,
  "child_key" VARCHAR(255) NOT NULL,
  PRIMARY KEY ("task_id", "parent_key", "child_key")
);

CREATE TABLE "task_groups" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
  "user_id" integer,
  "status" node_status NOT NULL DEFAULT (node_status.created),
  "created_at" timestamp NOT NULL DEFAULT (now()),
  "updated_at" timestamp NOT NULL DEFAULT (now()),
  "deleted_at" timestamp,
  PRIMARY KEY ("id", "user_id")
);

CREATE TABLE "tasks" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
  "group_id" integer,
  "content_type" content_type NOT NULL,
  "filename" varchar(511),
  "original_filename" varchar(511),
  "created_at" timestamp NOT NULL DEFAULT (now()),
  "updated_at" timestamp NOT NULL DEFAULT (now()),
  "deleted_at" timestamp,
  PRIMARY KEY ("id", "group_id")
);

CREATE TABLE "task_results" (
  "task_id" integer PRIMARY KEY,
  "raw" jsonb NOT NULL,
  "formatted" jsonb
);

CREATE TABLE "blacklists" (
  "user_id" integer PRIMARY KEY,
  "phrase" VARCHAR(255) UNIQUE NOT NULL
);

ALTER TABLE "role_permissions" ADD FOREIGN KEY ("role_id") REFERENCES "roles" ("id");

ALTER TABLE "role_permissions" ADD FOREIGN KEY ("permission_id") REFERENCES "permissions" ("id");

ALTER TABLE "user_roles" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "user_roles" ADD FOREIGN KEY ("role_id") REFERENCES "roles" ("id");

ALTER TABLE "tokens" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "webhooks" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "task_status_nodes" ADD FOREIGN KEY ("task_id") REFERENCES "tasks" ("id");

ALTER TABLE "task_status_node_relations" ADD FOREIGN KEY ("task_id") REFERENCES "tasks" ("id");

ALTER TABLE "task_groups" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "tasks" ADD FOREIGN KEY ("group_id") REFERENCES "task_groups" ("id");

ALTER TABLE "task_results" ADD FOREIGN KEY ("task_id") REFERENCES "tasks" ("id");

ALTER TABLE "blacklists" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

-- +goose StatementEnd

-- +goose Down
-- +goose StatementBegin
SELECT 'down SQL query';
-- Удаление таблиц в обратном порядке, чтобы избежать конфликтов внешних ключей
DROP TABLE IF EXISTS task_results;
DROP TABLE IF EXISTS tasks;
DROP TABLE IF EXISTS task_groups;
DROP TABLE IF EXISTS webhooks;
DROP TABLE IF EXISTS tokens;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS blacklists;
DROP TABLE IF EXISTS task_status_node_relations;
DROP TABLE IF EXISTS task_status_nodes;
DROP TABLE IF EXISTS role_permissions;
DROP TABLE IF EXISTS user_roles;
DROP TABLE IF EXISTS roles;


-- Удаление пользовательских типов ENUM
DROP TYPE IF EXISTS content_type;
DROP TYPE IF EXISTS node_status;

-- +goose StatementEnd
