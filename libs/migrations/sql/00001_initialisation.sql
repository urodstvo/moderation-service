-- +goose Up
-- +goose StatementBegin
SELECT 'up SQL query';
CREATE TYPE "user_roles" AS ENUM (
  'user',
  'admin'
);

CREATE TYPE "task_status" AS ENUM (
  'created',
  'processed',
  'completed'
);

CREATE TYPE "content_type" AS ENUM (
  'text',
  'image',
  'audio',
  'video'
);

CREATE TABLE "users" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "email" varchar(255) UNIQUE NOT NULL,
  "password" varchar(255) NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT (now()),
  "updated_at" timestamp NOT NULL DEFAULT (now()),
  "deleted_at" timestamp,
  "is_verified" boolean NOT NULL DEFAULT false,
  "role" user_roles NOT NULL DEFAULT 'user'
);

INSERT INTO "users" ("email", "password", "is_verified", "role")
VALUES ('testuser@example.com', 'testpassword', true, 'user');


CREATE TABLE "tokens" (
  "user_id" integer PRIMARY KEY,
  "token" varchar(255) UNIQUE NOT NULL
);

INSERT INTO "tokens" ("user_id", "token")
VALUES (1, 'test-api-token');

CREATE TABLE "webhooks" (
  "user_id" integer PRIMARY KEY,
  "webhook_url" text NOT NULL
);

INSERT INTO "webhooks" ("user_id", "webhook_url")
VALUES (1, 'http://test-webhook:8000/webhook');

CREATE TABLE "task_group" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
  "user_id" integer NOT NULL,
  "status" task_status NOT NULL DEFAULT 'created',
  "created_at" timestamp NOT NULL DEFAULT (now()),
  "updated_at" timestamp NOT NULL DEFAULT (now()),
  "deleted_at" timestamp,
  PRIMARY KEY ("id")
);

CREATE TABLE "task" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
  "group_id" integer NOT NULL,
  "status" task_status NOT NULL DEFAULT 'created',
  "content_type" content_type NOT NULL,
  "file_path" text,
  "created_at" timestamp NOT NULL DEFAULT (now()),
  "updated_at" timestamp NOT NULL DEFAULT (now()),
  "deleted_at" timestamp,
  PRIMARY KEY ("id")
);

CREATE TABLE "task_result" (
  "task_id" integer PRIMARY KEY,
  "content" json NOT NULL
);

ALTER TABLE "tokens" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "webhooks" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "task_group" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "task" ADD FOREIGN KEY ("group_id") REFERENCES "task_group" ("id");

ALTER TABLE "task_result" ADD FOREIGN KEY ("task_id") REFERENCES "task" ("id");

-- +goose StatementEnd

-- +goose Down
-- +goose StatementBegin
SELECT 'down SQL query';
-- Удаление таблиц в обратном порядке, чтобы избежать конфликтов внешних ключей
DROP TABLE IF EXISTS task_result;
DROP TABLE IF EXISTS task;
DROP TABLE IF EXISTS task_group;
DROP TABLE IF EXISTS webhooks;
DROP TABLE IF EXISTS tokens;
DROP TABLE IF EXISTS users;

-- Удаление пользовательских типов ENUM
DROP TYPE IF EXISTS content_type;
DROP TYPE IF EXISTS task_status;
DROP TYPE IF EXISTS user_roles;

-- +goose StatementEnd
