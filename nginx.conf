worker_processes auto;

events {
    worker_connections 2000;
}

http {
    resolver 127.0.0.11 valid=10s;
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    tcp_nopush on;
    keepalive_timeout 30;
    # server_tokens off;

    log_format auth_check '$remote_addr - $remote_user [$time_local] "$request" '
                      'status=$status body_bytes_sent=$body_bytes_sent '
                      'referrer=$http_referer user_agent="$http_user_agent" '
                      'auth_header="$http_authorization"';

    access_log /var/log/nginx/auth_check.log auth_check;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    client_max_body_size 100M;

    upstream task_aggregator {
        server task-aggregator:8000;
    }

    upstream authorization {
        server authorization:8000;
    }

    upstream postgres_console {
        server adminer:8080;
    }

    upstream minio_s3 {
        least_conn;
        server minio:9000;
    }

    upstream minio_console {
        least_conn;
        server minio:9001;
    }

    server {
        listen 80;
        server_name adminer.localhost;

        location / {
            proxy_pass http://postgres_console/;
            proxy_set_header Host $proxy_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

   server {
        listen 80;
        server_name s3.localhost;

        ignore_invalid_headers off;
        client_max_body_size 0;
        proxy_buffering off;
        proxy_request_buffering off;

        location / {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 300;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            chunked_transfer_encoding off;

            proxy_pass http://minio_s3;
        }
    }

    server {
        listen 80;
        server_name console.s3.localhost;

        ignore_invalid_headers off;
        client_max_body_size 0;
        proxy_buffering off;
        proxy_request_buffering off;

        location / {
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-NginX-Proxy true;
            real_ip_header X-Real-IP;
            proxy_connect_timeout 300;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            chunked_transfer_encoding off;

            proxy_pass http://minio_console;
        }
    }

    server {
        listen 80;
        server_name localhost;

        location /auth/ {
            proxy_pass http://authorization/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        location /api/v2/ {
            auth_request /auth/check;  # Отправляем запрос в сервис авторизации


            auth_request_set $user_id $upstream_http_x_user_id;

            proxy_pass http://task_aggregator/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header X-User-Id $user_id;  # Добавляем user_id
            proxy_set_header Authorization $http_authorization;

            # debug
            add_header X-User-Id $user_id always;
         }

        location = /auth/check {
            internal; 

            proxy_pass http://authorization/check;
            proxy_http_version 1.1;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;
        }


        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
        }

        location / {
            return 404;
        }
    }
}
